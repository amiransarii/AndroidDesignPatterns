<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:bind="http://schemas.android.com/tools">
    
    <data>
        <variable
            name="viewModel"
            type="org.game.mvvmdesignapplication2.viewmodels.LoginViewModel" />
    </data>
    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:layout_margin="8dp"
            android:orientation="vertical">

            <EditText
                android:id="@+id/inEmail"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Email"
                android:inputType="textEmailAddress"
                android:padding="8dp"
                android:text="@={viewModel.userEmail}" />


            <EditText
                android:id="@+id/inPassword"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Password"
                android:inputType="textPassword"
                android:padding="8dp"
                android:text="@={viewModel.userPassword}" />


            <Button
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:onClick="@{()-> viewModel.onLoginClicked()}"
                android:text="LOGIN"
                bind:toastMessage="@{viewModel.toastMessage}" />


        </LinearLayout>

    </ScrollView>

   <!-- Data Binding requires us to set the layout tag at the top. Here our ViewModel binds the data to the View.
    ()-> viewModel.onLoginClicked() invokes the Button click listener lambda defined in our ViewModel.
    The EditText updates the values in the Model (via View Model).

    bind:toastMessage="@{viewModel.toastMessage}" is a custom attribute weâ€™ve created for two-way data binding.
    Based on changes in the toastMessage in the ViewModel the BindingAdapter would get triggered in the View.-->
</layout>